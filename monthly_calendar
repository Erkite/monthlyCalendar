# Monthly Calendar
# Peyton Wall
# 2024-16-09

def isLeapYear(year):
    """
    >>> isLeapYear(2005)
    False
    """
    return (year % 100 != 0 and year % 4 == 0) or (year % 400 == 0)

def monthName(month):
    months = ["January", "February", "March", "April", "May", "June",
              "July", "August", "September", "October", "November", "December"]
    return months[month - 1]

def daysInMonth(month, year):
    # The current month (September, 2024) should have 30 days
    """
    >>> numDaysInMonth(9,2024)
    30
    """
    if month in [4, 6, 9, 11]:
        return 30
    elif month == 2:
        return 29 if isLeapYear(year) else 28
    else:
        return 31

def startingDayOfWeek(month, year):
    # This day should start on Monday in the month I was born (May, 2005)
    """
    >>> firstDayInWeek(5,2005)
    1
    """
    m = month
    y = year
    if month == 1 or month == 2:
        m += 12
        y -= 1
    k = y % 100
    j = y // 100
    day_of_week = (1 + (13 * (m + 1) // 5) + k + (k // 4) + (j // 4) - 2 * j) % 7 # https://en.wikipedia.org/wiki/Zeller's_congruence
    return (day_of_week + 6) % 7 + 1

def monthCalendarFor(month, year):
    month_name = monthName(month)
    title = f"{month_name} {year}"
    result = []
    result.append(title.center(20).rstrip()) # I wish I could rjust()
    result.append("Su Mo Tu We Th Fr Sa")
    
    start_day = startingDayOfWeek(month, year)
    days = daysInMonth(month, year)
    
    current_day = 1 # Pain, I had starting at 0 forever
    week = ["  "] * (start_day - 1)
    
    while len(week) < 7:
        week.append(f"{current_day:2}")
        current_day += 1
    result.append(" ".join(week).rstrip())
    
    while current_day <= days:
        week = []
        for _ in range(7):
            if current_day <= days:
                week.append(f"{current_day:2}")
                current_day += 1
            else:
                week.append("  ")
        result.append(" ".join(week).rstrip())

    while len(result) < 8: # Please be 8 lines
        result.append("")
    
    return "\n".join(result) + "\n"



# Gotta run those tests for Prof. O.
if __name__ == "__main__":
    import doctest
    doctest.testmod()

# Add your own line to call functions
